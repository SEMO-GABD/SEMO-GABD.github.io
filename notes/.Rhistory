legend.text =       theme_text(colour = NA,size = base_size * 0.8),
legend.title =      theme_text(colour = NA,size = base_size * 0.8, face = "bold", hjust = 0),
legend.position =   "right",
panel.background =  theme_rect(fill = NA, colour = NA),
panel.border =      theme_rect(fill = NA, colour=NA),
panel.grid.major =  theme_line(colour = NA, size = 0.2),
panel.grid.minor =  theme_line(colour = NA, size = 0.5),
panel.margin =      unit(0.25, "lines"),
strip.background =  theme_rect(fill = NA, colour = NA),
strip.text.x =      theme_text(colour = NA,size = base_size * 0.8),
strip.text.y =      theme_text(colour = NA,size = base_size * 0.8, angle = -90),
plot.background =   theme_rect(colour = NA),
plot.title =        theme_text(colour = NA,size = base_size * 1.2),
plot.margin =       unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
}
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = subsp, alpha=0.4)) +theme_invisible() + theme(legend.position = "none") +coord_flip()
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = subsp, alpha=0.4)) + theme(legend.position = "none") +coord_flip()
p2
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp=vplayout(1,1:4)) # the first density plot will occupy the top of the grid
print(p3, vp=vplayout(2:5,1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp=vplayout(2:5,5)) # with the second density plot occupying a narrow vertical strip at the right
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = subsp, alpha=0.4)) +theme_void() + theme(legend.position = "none") +coord_flip()
p2
p1<-ggplot(df) + # based on the dataframe just defined
scale_fill_manual(values=cbnbPalette) + # using the colorblind-friendly palette
geom_density(aes(x = x, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + # overall density plot - plotted on the negative
geom_density(aes(x = x, y = ..count.., fill = subsp, alpha=0.4)) + # so as to be specular to the densities by subspecies
theme_void() + # oh yeah, I don't want any other graphical element to crowd this plot - the x axys is the same as in the main plot
theme(legend.position = "none")
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=subsp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = subsp, alpha=0.4)) +theme_void() + theme(legend.position = "none") +coord_flip()
#finally the main x/y plot - nothing to write home about
p3<- ggplot(df) + scale_colour_manual(values=cbnbPalette) + geom_point(aes(x = x, y = y, col=subsp)) + theme(legend.position = c(1.2,1.2))
#now let's print the plot to screen!
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp=vplayout(1,1:4)) # the first density plot will occupy the top of the grid
print(p3, vp=vplayout(2:5,1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp=vplayout(2:5,5)) # with the second density plot occupying a narrow vertical strip at the right
#
library(ggplot2);
library(grid);
data(iris)
x <- jitter(iris[,c('Sepal.Length')])
y <- jitter(iris[,c('Sepal.Width')])
spp <- factor(iris[,c('Species')])
# The color blind palette without black:
cbnbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
df<-data.frame(x,y,spp) # just create a dataframe - x y and z are easier to write than Petal.length and so on
# I now define the (gg)plots
# old p1 and p2 (..density.. plots)...
# p1<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = x, y = -..density..), col='black', fill="#CCCCCC") + geom_density(aes(x = x, y = ..density.., fill = spp, alpha=0.4)) +theme_invisible() + opts(legend.position = "none")
# p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..density..), col='black', fill="#CCCCCC") + geom_density(aes(x = y, y = ..density.., fill = spp, alpha=0.4)) +theme_invisible() + opts(legend.position = "none") +coord_flip()
# now susbstituted by ..count.. plots as suggested by Andrew in comments
p1<-ggplot(df) + # based on the dataframe just defined
scale_fill_manual(values=cbnbPalette) + # using the colorblind-friendly palette
geom_density(aes(x = x, y = -..count.., col=spp), fill="#CCCCCCCC", position = "stack") + # overall density plot - plotted on the negative
geom_density(aes(x = x, y = ..count.., fill = spp, alpha=0.4)) + # so as to be specular to the densities by sppecies
theme_void() + # oh yeah, I don't want any other graphical element to crowd this plot - the x axys is the same as in the main plot
theme(legend.position = "none")
# this is a second density plot, oriented vertically (hence the 'coord_flip()' at the end
p2<-ggplot(df) + scale_fill_manual(values=cbnbPalette) + geom_density(aes(x = y, y = -..count.., col=spp), fill="#CCCCCCCC", position = "stack") + geom_density(aes(x = y, y = ..count.., fill = spp, alpha=0.4)) +theme_void() + theme(legend.position = "none") +coord_flip()
#finally the main x/y plot - nothing to write home about
p3<- ggplot(df) + scale_colour_manual(values=cbnbPalette) + geom_point(aes(x = x, y = y, col=spp)) + theme(legend.position = c(1.2,1.2))
#now let's print the plot to screen!
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp=vplayout(1,1:4)) # the first density plot will occupy the top of the grid
print(p3, vp=vplayout(2:5,1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp=vplayout(2:5,5)) # with the second density plot occupying a narrow vertical strip at the right
# done! Enjoy!
?theme
p3<- ggplot(df) +
scale_colour_manual(values=cbnbPalette) +
geom_point(aes(x = x, y = y, col=spp)) +
theme(legend.position = c(1.2,1.2), legend.title = "Species")
source('~/Documents/r/cool_iris_plot.R')
p3 <- ggplot(df) +
scale_colour_manual(values = cbnbPalette, name = "Species") +
geom_point(aes(x = x, y = y, col = spp)) +
theme(legend.position = c(1.2, 1.2))
#now let's print the plot to screen!
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp = vplayout(1, 1:4)) # the first density plot will occupy the top of the grid
print(p3, vp = vplayout(2:5, 1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp = vplayout(2:5, 5)) # with the second density plot occupying a narrow vertical strip at the right
#finally the main x/y plot - nothing to write home about
p3 <- ggplot(df) +
scale_colour_manual(values = cbnbPalette, name = "Species") +
geom_point(aes(x = x, y = y, col = spp)) +
theme(legend.position = c(1.2, 1.2)) +
xlab = "Sepal Length" +
ylab = "Sepal Width"
#finally the main x/y plot - nothing to write home about
p3 <- ggplot(df) +
scale_colour_manual(values = cbnbPalette, name = "Species") +
geom_point(aes(x = x, y = y, col = spp)) +
theme(legend.position = c(1.2, 1.2)) +
xlab("Sepal Length") +
ylab("Sepal Width")
grid.newpage()
pushViewport(viewport(layout = grid.layout(5, 5))) # a 5 by 5 grid
print(p1, vp = vplayout(1, 1:4)) # the first density plot will occupy the top of the grid
print(p3, vp = vplayout(2:5, 1:4)) # the main x/y plot will instead spread across most of the grid
print(p2, vp = vplayout(2:5, 5)) # with the second density plot occupying a narrow vertical strip at the right
# done! Enjoy!
library(cowplot)
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
library(dplyr)
# misc.R
# functions to stamp figures as good, bad, or ugly
stamp <- function(p, color, alpha, label)
{
ggdraw(p) +
draw_text(label, x=.99, y=1, vjust=-.6, hjust=1, size=16, color=color, alpha=alpha, angle=90) +
draw_line(c(.99, .99), c(0, 1), size=1.4, color=color, alpha=alpha)
}
#stamp_good <- function(p) stamp(p, "olivedrab4", .7, "good")
stamp_good <- function(p) stamp(p, "transparent", .7, "")
stamp_bad <- function(p) stamp(p, "firebrick", .7, "bad")
stamp_ugly <- function(p) stamp(p, "orange3", .7, "ugly")
# function to make a palette of colors
palette_plot <- function(colors, label_size = 6, print_color_labels = TRUE)
{
if (length(print_color_labels)==1)
print_color_labels <- rep(print_color_labels, length(colors))
# find light and dark colors by converting to Lab space
cols <- t(col2rgb(colors))
m <- convertColor(cols, from = "sRGB", to = "Lab", scale.in = 255)
light <- m[,1]>65
# data frame of rectangles
n <- length(colors)
tiles <- data.frame(xmin=(0:(n-1)+.1)/n,
xmax=((1:n)-.1)/n,
x=(0:(n-1)+.5)/n,
ymin=rep(0, n),
ymax=rep(1, n),
y=rep(0.5, n),
color=factor(colors, levels=colors),
light=light)
ggplot() +
geom_rect(data=tiles, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=color)) +
scale_fill_manual(values=colors) +
geom_text(data=tiles[tiles$light & print_color_labels,], aes(x, y, label=color), color="black", size=label_size) +
geom_text(data=tiles[!tiles$light & print_color_labels,], aes(x, y, label=color), color="white", size=label_size) +
theme_nothing() + theme(legend.position = "none")
}
theme_dviz <- function(font_size = 14, font_family = ""){
theme_cowplot(font_size = font_size, font_family = font_family)
}
theme_dviz_half_open <- function(font_size = 14, font_family = ""){
theme_cowplot(font_size = font_size, font_family = font_family)
}
# horizontal grid lines only
theme_dviz_hgrid <- function(font_size = 14, font_family = "") {
color = "grey90"
line_size = 0.5
# Starts with theme_cowplot and then modify some parts
theme_cowplot(font_size = font_size, font_family = font_family) %+replace%
theme(
# make horizontal grid lines
panel.grid.major   = element_line(colour = color,
size = line_size),
panel.grid.major.x = element_blank(),
# adjust axis tickmarks
axis.ticks        = element_line(colour = color, size = line_size),
# adjust x axis
axis.line.x       = element_line(colour = color, size = line_size),
# no y axis line
axis.line.y       = element_blank()
)
}
# vertical grid lines only
theme_dviz_vgrid <- function(font_size = 14, font_family = "") {
color = "grey90"
line_size = 0.5
# Starts with theme_cowplot and then modify some parts
theme_cowplot(font_size = font_size, font_family = font_family) %+replace%
theme(
# make vertical grid lines
panel.grid.major   = element_line(colour = color,
size = line_size),
panel.grid.major.y = element_blank(),
# adjust axis tickmarks
axis.ticks        = element_line(colour = color, size = line_size),
# adjust y axis
axis.line.y       = element_line(colour = color, size = line_size),
# no x axis line
axis.line.x       = element_blank()
)
}
# grid lines along major axis ticks, no axes
theme_dviz_grid <- function(font_size = 14, font_family = "") {
color = "grey90"
line_size = 0.5
# Starts with theme_cowplot and then modify some parts
theme_cowplot(font_size = font_size, font_family = font_family) %+replace%
theme(
# make horizontal grid lines
panel.grid.major   = element_line(colour = color,
size = line_size),
# adjust axis tickmarks
axis.ticks        = element_line(colour = color, size = line_size),
# no x or y axis lines
axis.line.x       = element_blank(),
axis.line.y       = element_blank(),
)
}
iris %>%
select(Sepal.Width, Sepal.Length, species=Species) %>%
ggplot(aes(x=Sepal.Width, y=Sepal.Length, shape=species, fill=species)) +
geom_point(color="black", size=2) +
scale_shape_manual(values=21:23) +
scale_fill_manual(values=c("#E69F00", "#56B4E9", "#009E73")) +
xlab("sepal width") +
ylab("sepal length") +
scale_x_continuous(limits=c(1.95, 4.6), expand=c(0, 0)) +
scale_y_continuous(limits=c(3.95, 8.1), expand=c(0, 0)) -> iris_plot
p <- plot_grid(NULL, iris_plot + theme_dviz_grid(), NULL, nrow=1, rel_widths=c(0.02, 1, 0.04))
p
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
lincoln_weather %>% mutate(month_short = fct_recode(Month,
Jan = "January",
Feb = "February",
Mar = "March",
Apr = "April",
May = "May",
Jun = "June",
Jul = "July",
Aug = "August",
Sep = "September",
Oct = "October",
Nov = "November",
Dec = "December")) %>%
mutate(month_short = fct_rev(month_short)) -> lincoln_df
install.packages("ggridges")
library(ggridges)
lincoln_weather
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016')
library(viridis)
library(viridis)
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016')
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
library(ggridges)
scale_fill_cont
library(ggforce)
install.packages("ggforce")
library(ggforce)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
library(colorspace)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
update.packages(colorspace)
install.packages("colorspace")
install.packages("colorspace")
install.packages("colorspace")
install.packages("colorspace")
library(colorspace)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
library(ggridges)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
library(ggplot2)
bandwidth <- 3.4
lincoln_base <- ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, bandwidth = bandwidth,
color = "black", size = 0.25) +
scale_x_continuous(expand = c(0, 0), breaks = c(0, 25, 50, 75), labels = NULL) +
scale_y_discrete(expand = c(0, .2, 0, 2.6)) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0) +
xlab("mean temperature (°F)") +
guides(fill = "none") +
theme_ridges(center = TRUE, grid = TRUE, font_family = dviz_font_family) +
theme(axis.title.y = element_blank())
# x axis labels
temps <- data.frame(temp = c(0, 25, 50, 75))
# calculate corrected color ranges
# stat_joy uses the +/- 3*bandwidth calculation internally
tmin <- min(lincoln_weather$`Mean Temperature [F]`) - 3*bandwidth
tmax <- max(lincoln_weather$`Mean Temperature [F]`) + 3*bandwidth
xax <- axis_canvas(lincoln_base, axis = "x", ylim = c(0, 2)) +
geom_ridgeline_gradient(data = data.frame(temp = seq(tmin, tmax, length.out = 100)),
aes(x = temp, y = 1.1, height = .9, fill = temp),
color = "transparent") +
geom_text(data = temps, aes(x = temp, label = temp),
color = "black", family = dviz_font_family,
y = 0.9, hjust = 0.5, vjust = 1, size = 14/.pt) +
scale_fill_continuous_sequential(palette = "Heat", l1 = 20, l2 = 100, c2 = 0)
lincoln_final <- insert_xaxis_grob(lincoln_base, xax, position = "bottom", height = unit(0.1, "null"))
ggdraw(lincoln_final)
library(colorspace)
